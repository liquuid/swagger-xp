/**
 * Vehicle Maintance Manager
 * This is a sample vehicle maintance manager server.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: apiteam@vmmapi
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiResponse', 'model/Vehicle'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiResponse'), require('../model/Vehicle'));
  } else {
    // Browser globals (root is window)
    if (!root.VehicleMaintanceManager) {
      root.VehicleMaintanceManager = {};
    }
    root.VehicleMaintanceManager.VehicleApi = factory(root.VehicleMaintanceManager.ApiClient, root.VehicleMaintanceManager.ApiResponse, root.VehicleMaintanceManager.Vehicle);
  }
}(this, function(ApiClient, ApiResponse, Vehicle) {
  'use strict';

  /**
   * Vehicle service.
   * @module api/VehicleApi
   * @version 0.0.1
   */

  /**
   * Constructs a new VehicleApi. 
   * @alias module:api/VehicleApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addVehicle operation.
     * @callback module:api/VehicleApi~addVehicleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new vehicle
     * 
     * @param {module:model/Vehicle} body Vehicle object that needs to be added to the garage
     * @param {module:api/VehicleApi~addVehicleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addVehicle = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addVehicle");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['vehiclegarage_auth'];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/vehicle', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVehicle operation.
     * @callback module:api/VehicleApi~deleteVehicleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a vehicle
     * 
     * @param {Number} vehicleId Vehicle id to delete
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiKey 
     * @param {module:api/VehicleApi~deleteVehicleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteVehicle = function(vehicleId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'vehicleId' is set
      if (vehicleId === undefined || vehicleId === null) {
        throw new Error("Missing the required parameter 'vehicleId' when calling deleteVehicle");
      }


      var pathParams = {
        'vehicleId': vehicleId
      };
      var queryParams = {
      };
      var headerParams = {
        'api_key': opts['apiKey']
      };
      var formParams = {
      };

      var authNames = ['vehiclegarage_auth'];
      var contentTypes = [];
      var accepts = ['application/xml', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/vehicle/{vehicleId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVehicleById operation.
     * @callback module:api/VehicleApi~getVehicleByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Vehicle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find vehicle by ID
     * Returns a single vehicle
     * @param {Number} vehicleId ID of vehicle to return
     * @param {module:api/VehicleApi~getVehicleByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Vehicle}
     */
    this.getVehicleById = function(vehicleId, callback) {
      var postBody = null;

      // verify the required parameter 'vehicleId' is set
      if (vehicleId === undefined || vehicleId === null) {
        throw new Error("Missing the required parameter 'vehicleId' when calling getVehicleById");
      }


      var pathParams = {
        'vehicleId': vehicleId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/xml', 'application/json'];
      var returnType = Vehicle;

      return this.apiClient.callApi(
        '/vehicle/{vehicleId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVehicle operation.
     * @callback module:api/VehicleApi~updateVehicleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing vehicle
     * 
     * @param {module:model/Vehicle} body Vehicle object that needs to be added to the garage
     * @param {module:api/VehicleApi~updateVehicleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateVehicle = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateVehicle");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['vehiclegarage_auth'];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/vehicle', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVehicleWithForm operation.
     * @callback module:api/VehicleApi~updateVehicleWithFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a vehicle in the garage with form data
     * 
     * @param {Number} vehicleId ID of vehicle that needs to be updated
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Updated name of the vehicle
     * @param {String} opts.vehicletype Updated type of the vehicle
     * @param {module:api/VehicleApi~updateVehicleWithFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateVehicleWithForm = function(vehicleId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'vehicleId' is set
      if (vehicleId === undefined || vehicleId === null) {
        throw new Error("Missing the required parameter 'vehicleId' when calling updateVehicleWithForm");
      }


      var pathParams = {
        'vehicleId': vehicleId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'name': opts['name'],
        'vehicletype': opts['vehicletype']
      };

      var authNames = ['vehiclegarage_auth'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/vehicle/{vehicleId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadFile operation.
     * @callback module:api/VehicleApi~uploadFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * uploads an image
     * 
     * @param {Number} vehicleId ID of vehicle to update
     * @param {Object} opts Optional parameters
     * @param {String} opts.additionalMetadata Additional data to pass to server
     * @param {File} opts.file file to upload
     * @param {module:api/VehicleApi~uploadFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */
    this.uploadFile = function(vehicleId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'vehicleId' is set
      if (vehicleId === undefined || vehicleId === null) {
        throw new Error("Missing the required parameter 'vehicleId' when calling uploadFile");
      }


      var pathParams = {
        'vehicleId': vehicleId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'additionalMetadata': opts['additionalMetadata'],
        'file': opts['file']
      };

      var authNames = ['vehiclegarage_auth'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = ApiResponse;

      return this.apiClient.callApi(
        '/vehicle/{vehicleId}/uploadImage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
