=begin
#Vehicle Maintance Manager

#This is a sample vehicle maintance manager server.

OpenAPI spec version: 0.0.1
Contact: apiteam@vmmapi
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require "uri"

module SwaggerClient
  class VehicleApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Add a new vehicle
    # 
    # @param body Vehicle object that needs to be added to the garage
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def add_vehicle(body, opts = {})
      add_vehicle_with_http_info(body, opts)
      return nil
    end

    # Add a new vehicle
    # 
    # @param body Vehicle object that needs to be added to the garage
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def add_vehicle_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VehicleApi.add_vehicle ..."
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling VehicleApi.add_vehicle"
      end
      # resource path
      local_var_path = "/vehicle"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['vehiclegarage_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VehicleApi#add_vehicle\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes a vehicle
    # 
    # @param vehicle_id Vehicle id to delete
    # @param [Hash] opts the optional parameters
    # @option opts [String] :api_key 
    # @return [nil]
    def delete_vehicle(vehicle_id, opts = {})
      delete_vehicle_with_http_info(vehicle_id, opts)
      return nil
    end

    # Deletes a vehicle
    # 
    # @param vehicle_id Vehicle id to delete
    # @param [Hash] opts the optional parameters
    # @option opts [String] :api_key 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_vehicle_with_http_info(vehicle_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VehicleApi.delete_vehicle ..."
      end
      # verify the required parameter 'vehicle_id' is set
      if @api_client.config.client_side_validation && vehicle_id.nil?
        fail ArgumentError, "Missing the required parameter 'vehicle_id' when calling VehicleApi.delete_vehicle"
      end
      # resource path
      local_var_path = "/vehicle/{vehicleId}".sub('{' + 'vehicleId' + '}', vehicle_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])
      header_params[:'api_key'] = opts[:'api_key'] if !opts[:'api_key'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['vehiclegarage_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VehicleApi#delete_vehicle\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Find vehicle by ID
    # Returns a single vehicle
    # @param vehicle_id ID of vehicle to return
    # @param [Hash] opts the optional parameters
    # @return [Vehicle]
    def get_vehicle_by_id(vehicle_id, opts = {})
      data, _status_code, _headers = get_vehicle_by_id_with_http_info(vehicle_id, opts)
      return data
    end

    # Find vehicle by ID
    # Returns a single vehicle
    # @param vehicle_id ID of vehicle to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(Vehicle, Fixnum, Hash)>] Vehicle data, response status code and response headers
    def get_vehicle_by_id_with_http_info(vehicle_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VehicleApi.get_vehicle_by_id ..."
      end
      # verify the required parameter 'vehicle_id' is set
      if @api_client.config.client_side_validation && vehicle_id.nil?
        fail ArgumentError, "Missing the required parameter 'vehicle_id' when calling VehicleApi.get_vehicle_by_id"
      end
      # resource path
      local_var_path = "/vehicle/{vehicleId}".sub('{' + 'vehicleId' + '}', vehicle_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Vehicle')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VehicleApi#get_vehicle_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an existing vehicle
    # 
    # @param body Vehicle object that needs to be added to the garage
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_vehicle(body, opts = {})
      update_vehicle_with_http_info(body, opts)
      return nil
    end

    # Update an existing vehicle
    # 
    # @param body Vehicle object that needs to be added to the garage
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_vehicle_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VehicleApi.update_vehicle ..."
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling VehicleApi.update_vehicle"
      end
      # resource path
      local_var_path = "/vehicle"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['vehiclegarage_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VehicleApi#update_vehicle\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates a vehicle in the garage with form data
    # 
    # @param vehicle_id ID of vehicle that needs to be updated
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Updated name of the vehicle
    # @option opts [String] :vehicletype Updated type of the vehicle
    # @return [nil]
    def update_vehicle_with_form(vehicle_id, opts = {})
      update_vehicle_with_form_with_http_info(vehicle_id, opts)
      return nil
    end

    # Updates a vehicle in the garage with form data
    # 
    # @param vehicle_id ID of vehicle that needs to be updated
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Updated name of the vehicle
    # @option opts [String] :vehicletype Updated type of the vehicle
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_vehicle_with_form_with_http_info(vehicle_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VehicleApi.update_vehicle_with_form ..."
      end
      # verify the required parameter 'vehicle_id' is set
      if @api_client.config.client_side_validation && vehicle_id.nil?
        fail ArgumentError, "Missing the required parameter 'vehicle_id' when calling VehicleApi.update_vehicle_with_form"
      end
      # resource path
      local_var_path = "/vehicle/{vehicleId}".sub('{' + 'vehicleId' + '}', vehicle_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["name"] = opts[:'name'] if !opts[:'name'].nil?
      form_params["vehicletype"] = opts[:'vehicletype'] if !opts[:'vehicletype'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['vehiclegarage_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VehicleApi#update_vehicle_with_form\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # uploads an image
    # 
    # @param vehicle_id ID of vehicle to update
    # @param [Hash] opts the optional parameters
    # @option opts [String] :additional_metadata Additional data to pass to server
    # @option opts [File] :file file to upload
    # @return [ApiResponse]
    def upload_file(vehicle_id, opts = {})
      data, _status_code, _headers = upload_file_with_http_info(vehicle_id, opts)
      return data
    end

    # uploads an image
    # 
    # @param vehicle_id ID of vehicle to update
    # @param [Hash] opts the optional parameters
    # @option opts [String] :additional_metadata Additional data to pass to server
    # @option opts [File] :file file to upload
    # @return [Array<(ApiResponse, Fixnum, Hash)>] ApiResponse data, response status code and response headers
    def upload_file_with_http_info(vehicle_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VehicleApi.upload_file ..."
      end
      # verify the required parameter 'vehicle_id' is set
      if @api_client.config.client_side_validation && vehicle_id.nil?
        fail ArgumentError, "Missing the required parameter 'vehicle_id' when calling VehicleApi.upload_file"
      end
      # resource path
      local_var_path = "/vehicle/{vehicleId}/uploadImage".sub('{' + 'vehicleId' + '}', vehicle_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params["additionalMetadata"] = opts[:'additional_metadata'] if !opts[:'additional_metadata'].nil?
      form_params["file"] = opts[:'file'] if !opts[:'file'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['vehiclegarage_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApiResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VehicleApi#upload_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
