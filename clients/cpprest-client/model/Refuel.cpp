/**
 * Vehicle Maintance Manager
 * This is a sample vehicle maintance manager server.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: apiteam@vmmapi
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Refuel.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Refuel::Refuel()
{
    m_Id = 0L;
    m_IdIsSet = false;
    m_VehicleId = 0L;
    m_Quantity = 0L;
}

Refuel::~Refuel()
{
}

void Refuel::validate()
{
    // TODO: implement validation
}

web::json::value Refuel::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    val[U("vehicleId")] = ModelBase::toJson(m_VehicleId);
    val[U("quantity")] = ModelBase::toJson(m_Quantity);

    return val;
}

void Refuel::fromJson(web::json::value& val)
{
    if(val.has_field(U("id")))
    {
        setId(ModelBase::int64_tFromJson(val[U("id")]));
    }
    setVehicleId(ModelBase::int64_tFromJson(val[U("vehicleId")]));
    setQuantity(ModelBase::int64_tFromJson(val[U("quantity")]));
}

void Refuel::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("vehicleId"), m_VehicleId));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("quantity"), m_Quantity));
}

void Refuel::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::int64_tFromHttpContent(multipart->getContent(U("id"))));
    }
    setVehicleId(ModelBase::int64_tFromHttpContent(multipart->getContent(U("vehicleId"))));
    setQuantity(ModelBase::int64_tFromHttpContent(multipart->getContent(U("quantity"))));
}

int64_t Refuel::getId() const
{
    return m_Id;
}


void Refuel::setId(int64_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool Refuel::idIsSet() const
{
    return m_IdIsSet;
}

void Refuel::unsetId()
{
    m_IdIsSet = false;
}

int64_t Refuel::getVehicleId() const
{
    return m_VehicleId;
}


void Refuel::setVehicleId(int64_t value)
{
    m_VehicleId = value;
    
}
int64_t Refuel::getQuantity() const
{
    return m_Quantity;
}


void Refuel::setQuantity(int64_t value)
{
    m_Quantity = value;
    
}
}
}
}
}

