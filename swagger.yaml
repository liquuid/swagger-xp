swagger: '2.0'
info:
  description: This is a sample vehicle maintance manager server.
  version: 0.0.1
  title: Vehicle Maintance Manager
  termsOfService: /terms/
  contact:
    email: apiteam@vmmapi
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: 'localhost:3000'
basePath: /v2
tags:
  - name: vehicle
    description: Everything about vehicles
    externalDocs:
      description: Find out more
      url: 'http://localhost:3000'
  - name: garage
    description: Access to refuel bills
  - name: refuel
    description: Access to refuel bills
  - name: trip
    description: Register trips
  - name: fine
    description: Access to fines
  - name: reminder
    description: Access to reminders
schemes:
  - http
paths:
  /garage/inventory:
    get:
      tags:
        - garage
      summary: Get all registered vehicles
      description: ''
      produces:
        - application/xml
        - application/json
      responses:
        '405':
          description: Invalid input
      security:
        - vehiclegarage_auth:
            - 'read:garage'
  /vehicle:
    post:
      tags:
        - vehicle
      summary: Add a new vehicle
      description: ''
      operationId: addVehicle
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Vehicle object that needs to be added to the garage
          required: true
          schema:
            $ref: '#/definitions/Vehicle'
      responses:
        '405':
          description: Invalid input
      security:
        - vehiclegarage_auth:
            - 'write:vehicles'
            - 'read:vehicles'
    put:
      tags:
        - vehicle
      summary: Update an existing vehicle
      description: ''
      operationId: updateVehicle
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Vehicle object that needs to be added to the garage
          required: true
          schema:
            $ref: '#/definitions/Vehicle'
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Vehicle not found
        '405':
          description: Validation exception
      security:
        - vehiclegarage_auth:
            - 'write:vehicles'
            - 'read:vehicles'
  '/vehicle/{vehicleId}':
    get:
      tags:
        - vehicle
      summary: Find vehicle by ID
      description: Returns a single vehicle
      operationId: getVehicleById
      produces:
        - application/xml
        - application/json
      parameters:
        - name: vehicleId
          in: path
          description: ID of vehicle to return
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Vehicle'
        '400':
          description: Invalid ID supplied
        '404':
          description: Vehicle not found
      security:
        - api_key: []
    post:
      tags:
        - vehicle
      summary: Updates a vehicle in the garage with form data
      description: ''
      operationId: updateVehicleWithForm
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: vehicleId
          in: path
          description: ID of vehicle that needs to be updated
          required: true
          type: integer
          format: int64
        - name: name
          in: formData
          description: Updated name of the vehicle
          required: false
          type: string
        - name: vehicletype
          in: formData
          description: Updated type of the vehicle
          required: false
          type: string
      responses:
        '405':
          description: Invalid input
      security:
        - vehiclegarage_auth:
            - 'write:vehicles'
            - 'read:vehicles'
    delete:
      tags:
        - vehicle
      summary: Deletes a vehicle
      description: ''
      operationId: deleteVehicle
      produces:
        - application/xml
        - application/json
      parameters:
        - name: api_key
          in: header
          required: false
          type: string
        - name: vehicleId
          in: path
          description: Vehicle id to delete
          required: true
          type: integer
          format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Vehicle not found
      security:
        - vehiclegarage_auth:
            - 'write:vehicles'
            - 'read:vehicles'
  '/vehicle/{vehicleId}/uploadImage':
    post:
      tags:
        - vehicle
      summary: uploads an image
      description: ''
      operationId: uploadFile
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - name: vehicleId
          in: path
          description: ID of vehicle to update
          required: true
          type: integer
          format: int64
        - name: additionalMetadata
          in: formData
          description: Additional data to pass to server
          required: false
          type: string
        - name: file
          in: formData
          description: file to upload
          required: false
          type: file
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/ApiResponse'
      security:
        - vehiclegarage_auth:
            - 'write:vehicles'
            - 'read:vehicles'
  '/reminder/{reminderId}':
    get:
      tags:
        - reminder
      summary: Find reminder by ID
      description: Returns a single reminder
      operationId: getReminderById
      produces:
        - application/xml
        - application/json
      parameters:
        - name: reminderId
          in: path
          description: ID of reminder to return
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Reminder'
        '400':
          description: Invalid ID supplied
        '404':
          description: Vehicle not found
      security:
        - api_key: []
    delete:
      tags:
        - reminder
      summary: Deletes a reminder
      description: ''
      operationId: deleteReminder
      produces:
        - application/xml
        - application/json
      parameters:
        - name: api_key
          in: header
          required: false
          type: string
        - name: reminderId
          in: path
          description: reminder id to delete
          required: true
          type: integer
          format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Reminder not found
      security:
        - vehiclegarage_auth:
            - 'write:reminders'
            - 'read:reminders'
  '/reminder/vehicle/{vehicleId}':
    post:
      tags:
        - reminder
      summary: Add a reminder to the vehicle
      description: ''
      operationId: addReminderToVehicleId
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: vehicleId
          in: path
          description: ID of vehicle that needs to be updated
          required: true
          type: integer
          format: int64
        - name: message
          in: formData
          description: Reminder message
          required: true
          type: string
      responses:
        '405':
          description: Invalid input
      security:
        - vehiclegarage_auth:
            - 'write:reminders'
            - 'read:reminders'
  '/refuel/{refuelId}':
    get:
      tags:
        - refuel
      summary: Find refuel bill by ID
      description: Returns a single refuel bill
      operationId: getRefuelById
      produces:
        - application/xml
        - application/json
      parameters:
        - name: refuelId
          in: path
          description: ID of refuel to return
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Refuel'
        '400':
          description: Invalid ID supplied
        '404':
          description: Vehicle not found
      security:
        - api_key: []
    delete:
      tags:
        - refuel
      summary: Deletes a refuel bill
      description: ''
      operationId: deleteRefuel
      produces:
        - application/xml
        - application/json
      parameters:
        - name: api_key
          in: header
          required: false
          type: string
        - name: refuelId
          in: path
          description: refuel id to delete
          required: true
          type: integer
          format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Refuel bill not found
      security:
        - vehiclegarage_auth:
            - 'write:refuels'
            - 'read:refuels'
  '/refuel/vehicle/{vehicleId}':
    post:
      tags:
        - refuel
      summary: Add a refuel bill to the vehicle
      description: ''
      operationId: addRefuelToVehicleId
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: vehicleId
          in: path
          description: ID of vehicle that needs to be updated
          required: true
          type: integer
          format: int64
        - name: quantity
          in: formData
          description: Fuel Quantity
          required: true
          type: number
      responses:
        '405':
          description: Invalid input
      security:
        - vehiclegarage_auth:
            - 'write:refuels'
            - 'read:refuels'
  '/trip/{tripId}':
    get:
      tags:
        - trip
      summary: Find trip by ID
      description: Returns a single trip log
      operationId: getTripById
      produces:
        - application/xml
        - application/json
      parameters:
        - name: tripId
          in: path
          description: ID of trip to return
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Trip'
        '400':
          description: Invalid ID supplied
        '404':
          description: Vehicle not found
      security:
        - api_key: []
    delete:
      tags:
        - trip
      summary: Deletes a trip log
      description: ''
      operationId: deleteTrip
      produces:
        - application/xml
        - application/json
      parameters:
        - name: api_key
          in: header
          required: false
          type: string
        - name: tripId
          in: path
          description: trip id to delete
          required: true
          type: integer
          format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Trip log not found
      security:
        - vehiclegarage_auth:
            - 'write:trips'
            - 'read:trips'
  '/trip/vehicle/{vehicleId}':
    post:
      tags:
        - trip
      summary: Add a trip log to the vehicle
      description: ''
      operationId: addTripToVehicleId
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: vehicleId
          in: path
          description: ID of vehicle that needs to be updated
          required: true
          type: integer
          format: int64
        - name: quantity
          in: formData
          description: Fuel Quantity
          required: true
          type: number
      responses:
        '405':
          description: Invalid input
      security:
        - vehiclegarage_auth:
            - 'write:trips'
            - 'read:trips'
  '/fine/{fineId}':
    get:
      tags:
        - fine
      summary: Find fine by ID
      description: Returns a single fine
      operationId: getFineById
      produces:
        - application/xml
        - application/json
      parameters:
        - name: fineId
          in: path
          description: ID of fine to return
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Fine'
        '400':
          description: Invalid ID supplied
        '404':
          description: Vehicle not found
      security:
        - api_key: []
    delete:
      tags:
        - fine
      summary: Deletes a fine
      description: ''
      operationId: deleteFine
      produces:
        - application/xml
        - application/json
      parameters:
        - name: api_key
          in: header
          required: false
          type: string
        - name: fineId
          in: path
          description: fine id to delete
          required: true
          type: integer
          format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Fine not found
      security:
        - vehiclegarage_auth:
            - 'write:fines'
            - 'read:fines'
  '/fine/vehicle/{vehicleId}':
    post:
      tags:
        - fine
      summary: Add a fine to the vehicle
      description: ''
      operationId: addFineToVehicleId
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: vehicleId
          in: path
          description: ID of vehicle that needs to be updated
          required: true
          type: integer
          format: int64
        - name: amount
          in: formData
          description: The total amount of fines
          required: true
          type: number
      responses:
        '405':
          description: Invalid input
      security:
        - vehiclegarage_auth:
            - 'write:fines'
            - 'read:fines'
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ''
      operationId: createUsersWithArrayInput
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: List of user object
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ''
      operationId: createUsersWithListInput
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: List of user object
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: string
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      produces:
        - application/xml
        - application/json
      parameters: []
      responses:
        default:
          description: successful operation
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Updated user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
securityDefinitions:
  vehiclegarage_auth:
    type: oauth2
    authorizationUrl: 'http://localhost:3000/oauth/dialog'
    flow: implicit
    scopes:
      'write:vehicles': modify vehicles in your account
      'read:vehicles': read your vehicles
      'write:garage': modify garage in your account
      'read:garage': read your garage
      'write:reminders': modify reminders in your account
      'read:reminders': read your reminders
      'write:refuels': modify refuels in your account
      'read:refuels': read your refuels
      'write:trips': modify trips in your account
      'read:trips': read your trips
      'write:fines': modify fines in your account
      'read:fines': read your fines
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  Trip:
    type: object
    required:
      - vehicleId
      - distance
    properties:
      id:
        type: integer
        format: int64
      vehicleId:
        type: integer
        format: int64
      distance:
        type: number
        description: Traveled Distance
    xml:
      name: Distance
  Reminder:
    type: object
    required:
      - vehicleId
      - message
    properties:
      id:
        type: integer
        format: int64
      vehicleId:
        type: integer
        format: int64
      message:
        type: string
        description: Message to Remind
    xml:
      name: Reminder
  Refuel:
    type: object
    required:
      - vehicleId
      - quantity
    properties:
      id:
        type: integer
        format: int64
      vehicleId:
        type: integer
        format: int64
      quantity:
        type: integer
        format: int64
    xml:
      name: Refuel
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      userStatus:
        type: integer
        format: int32
        description: User Status
    xml:
      name: User
  Fine:
    type: object
    required:
      - vehicleId
      - name
      - description
    properties:
      id:
        type: integer
        format: int64
      vehicleId:
        type: integer
        format: int64
      name:
        type: string
      description:
        type: string
    xml:
      name: Fine
  Vehicle:
    type: object
    required:
      - name
      - photoUrls
      - vehicleType
    properties:
      id:
        type: integer
        format: int64
      userId:
        type: integer
        format: int64
      name:
        type: string
        example: Delorean
      photoUrls:
        type: array
        xml:
          name: photoUrl
          wrapped: true
        items:
          type: string
      vehicleType:
        type: string
        description: Type of vehicle
        enum:
          - motorcycle
          - automobile
          - tank
    xml:
      name: Vehicle
  Garage:
    type: object
    required:
      - name
    properties:
      id:
        type: integer
        format: int64
      userId:
        type: integer
        format: int64
      name:
        type: string
    xml:
      name: Garage
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
